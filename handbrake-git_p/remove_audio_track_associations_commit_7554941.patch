--- /libhb/muxavformat.c
+++ /libhb/muxavformat.c
@@ -593,55 +593,58 @@
         }
     }
 
+    // 20151125: Remove_Check_for_audio_track_associations_commit_7554941
+    // Remove this as it gave compile errors with archs ffmpeg
+    //
     // Check for audio track associations
-    for (ii = 0; ii < hb_list_count(job->list_audio); ii++)
-    {
-        audio = hb_list_item(job->list_audio, ii);
-        switch (audio->config.out.codec & HB_ACODEC_MASK)
-        {
-            case HB_ACODEC_FFAAC:
-            case HB_ACODEC_CA_AAC:
-            case HB_ACODEC_CA_HAAC:
-            case HB_ACODEC_FDK_AAC:
-            case HB_ACODEC_FDK_HAAC:
-                break;
-
-            default:
-            {
-                // Mark associated fallback audio tracks for any non-aac track
-                for(jj = 0; jj < hb_list_count( job->list_audio ); jj++ )
-                {
-                    hb_audio_t    * fallback;
-                    int             codec;
-
-                    if (ii == jj) continue;
-
-                    fallback = hb_list_item( job->list_audio, jj );
-                    codec = fallback->config.out.codec & HB_ACODEC_MASK;
-                    if (fallback->config.in.track == audio->config.in.track &&
-                        (codec == HB_ACODEC_FFAAC ||
-                         codec == HB_ACODEC_CA_AAC ||
-                         codec == HB_ACODEC_CA_HAAC ||
-                         codec == HB_ACODEC_FDK_AAC ||
-                         codec == HB_ACODEC_FDK_HAAC))
-                    {
-                        hb_mux_data_t * fallback_track;
-                        int           * sd;
-
-                        track = audio->priv.mux_data;
-                        fallback_track = fallback->priv.mux_data;
-                        sd = (int*)av_stream_new_side_data(track->st,
-                                                     AV_PKT_DATA_FALLBACK_TRACK,
-                                                     sizeof(int));
-                        if (sd != NULL)
-                        {
-                            *sd = fallback_track->st->index;
-                        }
-                    }
-                }
-            } break;
-        }
-    }
+    //for (ii = 0; ii < hb_list_count(job->list_audio); ii++)
+    //{
+        //audio = hb_list_item(job->list_audio, ii);
+        //switch (audio->config.out.codec & HB_ACODEC_MASK)
+        //{
+            //case HB_ACODEC_FFAAC:
+            //case HB_ACODEC_CA_AAC:
+            //case HB_ACODEC_CA_HAAC:
+            //case HB_ACODEC_FDK_AAC:
+            //case HB_ACODEC_FDK_HAAC:
+                //break;
+
+            //default:
+            //{
+                //// Mark associated fallback audio tracks for any non-aac track
+                //for(jj = 0; jj < hb_list_count( job->list_audio ); jj++ )
+                //{
+                    //hb_audio_t    * fallback;
+                    //int             codec;
+
+                    //if (ii == jj) continue;
+
+                    //fallback = hb_list_item( job->list_audio, jj );
+                    //codec = fallback->config.out.codec & HB_ACODEC_MASK;
+                    //if (fallback->config.in.track == audio->config.in.track &&
+                        //(codec == HB_ACODEC_FFAAC ||
+                         //codec == HB_ACODEC_CA_AAC ||
+                         //codec == HB_ACODEC_CA_HAAC ||
+                         //codec == HB_ACODEC_FDK_AAC ||
+                         //codec == HB_ACODEC_FDK_HAAC))
+                    //{
+                        //hb_mux_data_t * fallback_track;
+                        //int           * sd;
+
+                        //track = audio->priv.mux_data;
+                        //fallback_track = fallback->priv.mux_data;
+                        //sd = (int*)av_stream_new_side_data(track->st,
+                                                     //AV_PKT_DATA_FALLBACK_TRACK,
+                                                     //sizeof(int));
+                        //if (sd != NULL)
+                        //{
+                            //*sd = fallback_track->st->index;
+                        //}
+                    //}
+                //}
+            //} break;
+        //}
+    //}
 
     char * subidx_fmt =
         "size: %dx%d\n"
